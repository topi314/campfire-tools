{{ define "export_included_fields" }}
    <label class="form-control" for="included-fields" title="Select which fields to include in the export.">
        Included Fields
        <select class="form-control" id="included-fields" name="included_fields" size="10" required multiple>
            <option value="user_id" selected>User ID</option>
            <option value="username" selected>Username</option>
            <option value="display_name" selected>Display Name</option>
            <option value="rsvp_status" selected>RSVP Status</option>
            <option value="event_id" selected>Event ID</option>
            <option value="event_name" selected>Event Name</option>
            <option value="event_url">Event URL</option>
            <option value="event_time">Event Time</option>
            <option value="event_club_id">Event Club ID</option>
            <option value="event_creator_id">Event Creator ID</option>
            <option value="event_creator_username">Event Creator Username</option>
            <option value="event_discord_interested">Event Discord Interested</option>
            <option value="event_created_by_community_ambassador">Event Created by Community Ambassador</option>
            <option value="event_campfire_live_event_id">Event Campfire Live Event ID</option>
            <option value="event_campfire_live_event_name">Event Campfire Live Event Name</option>
        </select>
    </label>
{{ end }}

{{ define "league_progress" }}
    <span class="progress-{{ if eq . 100.0 }}green{{ else if gt . 66.0 }}yellow{{ else if gt . 33.0 }}orange{{ else }}red{{ end }}">
        {{ . }}%
    </span>
{{ end }}

{{ define "checkbox" }}
    {{ if . }}✅️{{ else }}❌{{ end }}
{{ end}}

{{ define "events_filter" }}
    <form id="events-filter" method="GET" action="{{ .FilterURL }}">
        <div class="inline-form-control">
            <div class="inline-form-control">
                <div class="stacked-form-control">
                    <label class="inline-form-control" for="from">
                        From
                        <input type="date" id="from" name="from" {{ if not .From.IsZero }}value="{{ formatDate .From }}"{{ end }} max="{{ formatDate now }}">
                    </label>
                    <label class="inline-form-control" for="to">
                        To
                        <input type="date" id="to" name="to" {{ if not .To.IsZero }}value="{{ formatDate .To }}"{{ end }} max="{{ formatDate now }}">
                    </label>
                </div>
                <div class="stacked-form-control">
                    <label class="form-control">
                        Only CA Events
                        <input type="checkbox" id="only-ca-events" name="only-ca-events" {{ if .OnlyCAEvents }}checked{{ end }}>
                    </label>
                </div>
            </div>

            <div class="stacked-form-control">
                <label for="date-preset">
                    <select id="date-preset">
                        <option value="">Select Quarter</option>
                        {{ range $quarter := .Quarters }}
                            <option value="{{ $quarter.Value }}">
                                {{ $quarter.Name }}
                            </option>
                        {{ end }}
                    </select>
                </label>
                <button type="submit" class="btn btn-primary">Filter</button>
            </div>
        </div>
    </form>
    <script>
        const fromDate = document.getElementById("from");
        const toDate = document.getElementById("to");

        fromDate.addEventListener("change", () => {
            if (toDate.value && fromDate.value > toDate.value) {
                toDate.value = fromDate.value; // Adjust "to" date if it's earlier than "from" date
            }
            toDate.min = fromDate.value; // Set the minimum value for "to" date
        });

        toDate.addEventListener("change", () => {
            if (fromDate.value && toDate.value < fromDate.value) {
                fromDate.value = toDate.value; // Adjust "from" date if it's later than "to" date
            }
            fromDate.max = toDate.value; // Set the maximum value for "from" date
        });

        document.getElementById("date-preset").addEventListener("change", (event) => {
            let from;
            let to;

            switch (event.target.value) {
                case "q3-2025":
                    from = "2025-07-01";
                    to = "2025-09-30";
                    break;
                case "q2-2025":
                    from = "2025-04-01";
                    to = "2025-06-30";
                    break;
                case "q1-2025":
                    from = "2025-01-01";
                    to = "2025-03-31";
                    break;
                case "q4-2024":
                    from = "2024-10-01";
                    to = "2024-12-31";
                    break;
                case "q3-2024":
                    from = "2024-07-01";
                    to = "2024-09-30";
                    break;
                case "q2-2024":
                    from = "2024-04-01";
                    to = "2024-06-30";
                    break;
                case "q1-2024":
                    from = "2024-01-01";
                    to = "2024-03-31";
                    break;
                case "q4-2023":
                    from = "2023-10-01";
                    to = "2023-12-31";
                    break;
                case "q3-2023":
                    from = "2023-07-01";
                    to = "2023-09-30";
                    break;
                case "q2-2023":
                    from = "2023-04-01";
                    to = "2023-06-30";
                    break;
                case "q1-2023":
                    from = "2023-01-01";
                    to = "2023-03-31";
                    break;
                default:
                    from = "";
                    to = "";
            }

            const now = new Date();
            if (from) {
                const fromDate = new Date(from);
                if (fromDate > now) {
                    from = now.toISOString().split("T")[0];
                }
            }

            if (to) {
                const toDate = new Date(to);
                if (toDate > now) {
                    to = now.toISOString().split("T")[0];
                }
            }

            document.getElementById("from").value = from;
            document.getElementById("to").value = to;
        })
    </script>
{{ end }}